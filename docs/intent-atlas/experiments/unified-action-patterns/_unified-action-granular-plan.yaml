granular_backend_action_plan:
  - phase: Initialize NestJS project and tooling
    granular_actions:
      - action: Initialize NestJS project with CLI
        pattern: project_initialization
      - action: Set up TypeScript config and strict mode
        pattern: project_initialization
      - action: Configure ESLint and Prettier for code quality
        pattern: project_initialization
      - action: Set up initial Git repository and .gitignore
        pattern: project_initialization

  - phase: Set up environment configuration management
    granular_actions:
      - action: Create .env and .env.example files
        pattern: setup_env_config
      - action: Implement ConfigModule and validation schema
        pattern: setup_env_config
      - action: Document all environment variables
        pattern: setup_env_config

  - phase: Integrate database and ORM
    granular_actions:
      - action: Install and configure ORM (Prisma/MikroORM)
        pattern: setup_database_orm
      - action: Define initial database schema and entities
        pattern: setup_database_orm
      - action: Set up migration and seeding scripts
        pattern: setup_database_orm
      - action: Test database connection and migrations
        pattern: setup_database_orm

  - phase: Implement authentication module
    granular_actions:
      - action: Scaffold AuthModule and User entity
        pattern: implement_authentication
      - action: Implement registration and login endpoints
        pattern: implement_authentication
      - action: Add JWT or session token logic
        pattern: implement_authentication
      - action: Implement password hashing and reset flow
        pattern: implement_authentication
      - action: Add guards for protected routes
        pattern: implement_authentication

  - phase: Implement RBAC and access control
    granular_actions:
      - action: Define roles and permissions enums
        pattern: implement_rbac_protection
      - action: Implement RBAC guards and decorators
        pattern: implement_rbac_protection
      - action: Integrate RBAC checks in controllers/services
        pattern: implement_rbac_protection
      - action: Add admin/owner/role seeding logic
        pattern: implement_rbac_protection

  - phase: Scaffold CRUD modules for all core entities
    granular_actions:
      - action: Scaffold module, controller, and service for each entity
        pattern: scaffold_nestjs_crud_module
      - action: Define DTOs and validation rules
        pattern: scaffold_nestjs_crud_module
      - action: Implement CRUD endpoints (create, read, update, delete)
        pattern: scaffold_nestjs_crud_module
      - action: Add RBAC guards to endpoints
        pattern: implement_rbac_protection
      - action: Write unit tests for CRUD logic
        pattern: implement_testing

  - phase: Integrate i18n/localization for user-facing strings
    granular_actions:
      - action: Install and configure i18n module
        pattern: implement_i18n_for_user_facing_strings
      - action: Create base and locale translation files
        pattern: implement_i18n_for_user_facing_strings
      - action: Refactor user-facing strings to use i18n
        pattern: implement_i18n_for_user_facing_strings
      - action: Add language switcher and locale detection
        pattern: implement_i18n_for_user_facing_strings

  - phase: Set up notification triggers and channels
    granular_actions:
      - action: Scaffold Notification module and entity
        pattern: setup_notification_triggers
      - action: Implement notification service and channels
        pattern: setup_notification_triggers
      - action: Add triggers for key events (assignment, due date, etc.)
        pattern: setup_notification_triggers
      - action: Integrate notification preferences and opt-in/out
        pattern: setup_notification_triggers

  - phase: Enforce validation and error handling for all endpoints
    granular_actions:
      - action: Add class-validator decorators to all DTOs
        pattern: enforce_validation_and_error_handling
      - action: Implement global exception filter
        pattern: enforce_validation_and_error_handling
      - action: Standardize error response format
        pattern: enforce_validation_and_error_handling
      - action: Write tests for validation and error cases
        pattern: implement_testing

  - phase: Implement audit logging for all major entity changes
    granular_actions:
      - action: Scaffold AuditLog entity and service
        pattern: implement_audit_logging
      - action: Add hooks to log create/update/delete actions
        pattern: implement_audit_logging
      - action: Integrate audit logs with RBAC and notification modules
        pattern: implement_audit_logging

  - phase: Add health check endpoints and monitoring
    granular_actions:
      - action: Implement /health endpoint
        pattern: implement_health_check_endpoint
      - action: Add checks for DB, cache, and external services
        pattern: implement_health_check_endpoint
      - action: Integrate with monitoring/alerting tools
        pattern: implement_health_check_endpoint

  - phase: Implement batch processing for recurring or heavy operations
    granular_actions:
      - action: Scaffold batch job processor/service
        pattern: implement_batch_processing
      - action: Implement batch jobs for notifications, analytics, cleanup
        pattern: implement_batch_processing
      - action: Add scheduling and error handling for jobs
        pattern: implement_batch_processing

  - phase: Implement soft deletion and data retention
    granular_actions:
      - action: Add soft delete flag to all major entities
        pattern: implement_soft_deletion_and_retention
      - action: Implement logic for soft delete and recovery
        pattern: implement_soft_deletion_and_retention
      - action: Enforce data retention and cleanup policies
        pattern: implement_soft_deletion_and_retention

  - phase: Write unit and e2e tests
    granular_actions:
      - action: Write unit tests for all services and controllers
        pattern: implement_testing
      - action: Write e2e tests for all API endpoints
        pattern: implement_testing
      - action: Add test coverage reporting
        pattern: implement_testing

  - phase: Generate API documentation
    granular_actions:
      - action: Install and configure Swagger/OpenAPI
        pattern: implement_api_documentation
      - action: Annotate controllers and DTOs for docs
        pattern: implement_api_documentation
      - action: Publish and version API documentation
        pattern: implement_api_documentation

  - phase: Set up Docker and CI/CD pipeline
    granular_actions:
      - action: Write Dockerfile and docker-compose.yml
        pattern: implement_devops_cicd
      - action: Set up CI pipeline for lint, test, build, deploy
        pattern: implement_devops_cicd
      - action: Automate environment setup and secrets management
        pattern: implement_devops_cicd 