high_level_backend_action_plan:
  - step: Initialize NestJS project and tooling
    unified_action_pattern: project_initialization
    description: Scaffold a new NestJS project with TypeScript, ESLint, Prettier, and basic tooling.
  - step: Set up environment configuration management
    unified_action_pattern: setup_env_config
    description: Centralize environment variables, config service, and validation.
  - step: Integrate database and ORM
    unified_action_pattern: setup_database_orm
    description: Configure ORM (e.g., MikroORM, Prisma), connection, migrations, and seed scripts.
  - step: Implement authentication module
    unified_action_pattern: implement_authentication
    description: Add JWT/session-based authentication, user registration, login, and password reset.
  - step: Implement RBAC and access control
    unified_action_pattern: implement_rbac_protection
    description: Add role-based access control for all resources and endpoints.
  - step: Scaffold CRUD modules for all core entities
    unified_action_pattern: scaffold_nestjs_crud_module
    description: Scaffold a complete NestJS CRUD module for each entity (controller, service, DTOs, validation, RBAC).
  - step: Integrate i18n/localization for user-facing strings
    unified_action_pattern: implement_i18n_for_user_facing_strings
    description: Add i18n support for all user-facing strings and configure supported locales.
  - step: Set up notification triggers and channels
    unified_action_pattern: setup_notification_triggers
    description: Implement notification triggers for key events and configure channels (in-app, email, SMS, push).
  - step: Enforce validation and error handling for all endpoints
    unified_action_pattern: enforce_validation_and_error_handling
    description: Use DTO validation and global error handling for robust, user-friendly APIs.
  - step: Implement audit logging for all major entity changes
    unified_action_pattern: implement_audit_logging
    description: Log all create, update, and delete actions for traceability and compliance.
  - step: Add health check endpoints and monitoring
    unified_action_pattern: implement_health_check_endpoint
    description: Expose health check endpoints and set up monitoring/alerting for system status.
  - step: Implement batch processing for recurring or heavy operations
    unified_action_pattern: implement_batch_processing
    description: Add batch processing for notifications, analytics, and data cleanup.
  - step: Implement soft deletion and data retention
    unified_action_pattern: implement_soft_deletion_and_retention
    description: Add soft deletion for entities and enforce data retention/recovery policies.
  - step: Write unit and e2e tests
    unified_action_pattern: implement_testing
    description: Write unit tests for services/controllers and e2e tests for API endpoints.
  - step: Generate API documentation
    unified_action_pattern: implement_api_documentation
    description: Generate OpenAPI/Swagger docs and document all endpoints, DTOs, and error codes.
  - step: Set up Docker and CI/CD pipeline
    unified_action_pattern: implement_devops_cicd
    description: Add Docker, docker-compose, and CI pipeline for automated linting, testing, and deployment. 